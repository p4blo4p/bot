name: üîç URLWatch Monitoring - Detailed Tracking

on:
  schedule:
    # Ejecutar cada 6 horas
    - cron: '0 */6 * * *'
  workflow_dispatch: # Permitir ejecuci√≥n manual
  
env:
  TZ: Europe/Madrid

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necesario para el historial
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Install dependencies
      run: |
        pip install urlwatch PyYAML

    - name: üìÅ Create directories
      run: |
        mkdir -p logs
        mkdir -p .urlwatch

    - name: üîß Setup URLWatch configuration
      run: |
        # Crear configuraci√≥n detallada
        cat > .urlwatch/config.yaml << 'EOF'
        display:
          new: true
          error: true
          unchanged: false
          empty-diff: true
        
        report:
          text:
            line_length: 120
            details: true
            footer: true
            minimal: false
        
        storage:
          minidb:
            filename: .urlwatch/cache.db
            
        reporters:
          - text:
              filename: logs/detailed_report.txt
              details: true
        EOF

    - name: üìù Create default URLs configuration 
      run: |
        # Crear archivo de URLs con solo las definiciones de jobs
        cat > .urlwatch/urls.yaml << 'EOF'
        name: "Oposiciones UCA - Inform√°tica"
        url: "https://personal.uca.es/oposiciones-turno-libre/"
        timeout: 30
        filter:
          - html2text
          - grep: "inform√°tica"
          - strip
        ---
        name: "Cursos INAP - Inform√°tica"  
        url: "https://buscadorcursos.inap.es/#/?abierto=true&funcion=6"
        timeout: 30
        filter:
          - html2text
          - grep: "(?i)inform√°tica|sistemas|tecnolog"
          - strip
        ---
        name: "Ayto Puerto Real - Tabl√≥n"
        url: "https://puertoreal.sedelectronica.es/board" 
        timeout: 30
        filter:
          - html2text
          - grep: "(?i)inform√°tica|t√©cnico|sistemas"
          - strip
        ---
        name: "Ayto Puerto Real - OPE"
        url: "https://puertoreal.es/oferta-publica-de-empleo/"
        timeout: 30
        filter:
          - html2text  
          - grep: "(?i)inform√°tica|t√©cnico|sistemas"
          - strip
        ---
        name: "BOE - B√∫squeda Oposiciones"
        url: "https://www.boe.es/buscar/doc.php?coleccion=boe&modo=ultimosdias&tm=4"
        timeout: 30
        filter:
          - html2text
          - grep: "(?i)inform√°tica|sistemas|tecnolog|t√©cnico superior|oposici√≥n"
          - strip
        ---
        name: "Junta de Andaluc√≠a - Funci√≥n P√∫blica"
        url: "https://www.juntadeandalucia.es/organismos/funcionpublica/"
        timeout: 30
        filter:
          - html2text
          - grep: "(?i)inform√°tica|sistemas|tecnolog|oposici√≥n"
          - strip
        EOF

    - name: üîÑ Extract jobs from custom URLs file
      run: |
        # Si existe un archivo urls2watch.yaml personalizado, extraer solo los jobs
        if [ -f "urls2watch.yaml" ]; then
          echo "üîÑ Detectado urls2watch.yaml personalizado, extrayendo jobs..."
          python extract_jobs.py
        fi

    - name: üóÇÔ∏è Load previous cache if exists
      run: |
        # Si existe cache anterior en el repo, restaurarlo
        if [ -f "cache.db" ]; then
          cp cache.db .urlwatch/cache.db
          echo "‚úÖ Cache anterior restaurado"
        else
          echo "‚ÑπÔ∏è No hay cache anterior, iniciando desde cero"
        fi

    - name: üîç Run URLWatch monitoring
      run: |
        echo "üöÄ Iniciando monitoreo URLWatch..."
        urlwatch --config .urlwatch/config.yaml --urls .urlwatch/urls.yaml --cache .urlwatch/cache.db --verbose > logs/urlwatch_$(date +%Y%m%d_%H%M%S).txt 2>&1 || true
        echo "‚úÖ Monitoreo completado"

    - name: üìà Analyze changes and generate detailed report
      run: |
        python track_changes.py
        
        # Crear resumen mejorado con nombres reales y URLs clickables
        cat > logs/summary.md << EOF
        # üìä URLWatch Monitoring Summary

        **Generated:** $(date '+%d/%m/%Y %H:%M:%S')
        **Status:** ‚úÖ Monitoring completed successfully

        ## Recent Activity

        ### Latest Execution Log
        \`$(ls -t logs/urlwatch_*.txt | head -n1 | xargs basename)\`

        ## Monitored Sites

        ### Detailed Status
        \`\`\`
        EOF
        
        # Extraer URLs y nombres del archivo de configuraci√≥n
        grep -A 1 "^name:" .urlwatch/urls.yaml | paste - - | while read name url; do
          name_clean=$(echo "$name" | sed 's/name: //; s/"//g')
          url_clean=$(echo "$url" | sed 's/url: //; s/"//g')
          
          # Buscar informaci√≥n en el archivo de estado
          if [ -f "logs/sites_status.txt" ]; then
            site_info=$(grep -A 5 "$url_clean" logs/sites_status.txt 2>/dev/null || grep -A 5 "$name_clean" logs/sites_status.txt 2>/dev/null || echo "")
            
            if [ -n "$site_info" ]; then
              last_check=$(echo "$site_info" | grep "√öltima verificaci√≥n:" | cut -d: -f2- | sed 's/^ *//')
              status=$(echo "$site_info" | grep "Estado:" | cut -d: -f2- | sed 's/^ *//')
              data_size=$(echo "$site_info" | grep "Tama√±o datos:" | cut -d: -f2- | sed 's/^ *//')
              total_checks=$(echo "$site_info" | grep "Total verificaciones:" | cut -d: -f2- | sed 's/^ *//')
              
              echo "================================================================================" >> logs/summary.md
              echo "üîç $name_clean" >> logs/summary.md
              echo "üåê [$url_clean]($url_clean)" >> logs/summary.md
              echo "üìÖ √öltima verificaci√≥n: $(date '+%d/%m/%Y %H:%M:%S')" >> logs/summary.md
              echo "‚úÖ Estado: $status" >> logs/summary.md
              echo "üìè Tama√±o datos: $data_size" >> logs/summary.md
              echo "üîÑ √öltima verificaci√≥n sin cambios: $last_check" >> logs/summary.md
              echo "üìä Total verificaciones: $total_checks" >> logs/summary.md
              echo "------------------------------------------------------------" >> logs/summary.md
              echo "" >> logs/summary.md
            else
              echo "================================================================================" >> logs/summary.md
              echo "üîç $name_clean" >> logs/summary.md
              echo "üåê [$url_clean]($url_clean)" >> logs/summary.md
              echo "üìÖ √öltima verificaci√≥n: $(date '+%d/%m/%Y %H:%M:%S')" >> logs/summary.md
              echo "‚úÖ Estado: ‚úÖ OK" >> logs/summary.md
              echo "üìè Tama√±o datos: 0 bytes" >> logs/summary.md
              echo "üîÑ √öltima verificaci√≥n sin cambios: $(date '+%d/%m/%Y %H:%M:%S')" >> logs/summary.md
              echo "üìä Total verificaciones: 1" >> logs/summary.md
              echo "------------------------------------------------------------" >> logs/summary.md
              echo "" >> logs/summary.md
            fi
          fi
        done
        
        echo "\`\`\`" >> logs/summary.md
        
        # Crear versi√≥n legible adicional
        cat >> logs/summary.md << EOF
        
        ## üìã Detailed Status (Readable Format)
        
        EOF
        
        grep -A 1 "^name:" .urlwatch/urls.yaml | paste - - | while read name url; do
          name_clean=$(echo "$name" | sed 's/name: //; s/"//g')
          url_clean=$(echo "$url" | sed 's/url: //; s/"//g')
          
          echo "### üîç $name_clean" >> logs/summary.md
          echo "" >> logs/summary.md
          echo "- **URL:** [$url_clean]($url_clean)" >> logs/summary.md
          echo "- **√öltima verificaci√≥n:** $(date '+%d/%m/%Y %H:%M:%S')" >> logs/summary.md
          echo "- **Estado:** ‚úÖ OK" >> logs/summary.md
          echo "- **√öltimo cambio:** $(date '+%d/%m/%Y %H:%M:%S')" >> logs/summary.md
          echo "- **√öltima verificaci√≥n sin cambios:** $(date '+%d/%m/%Y %H:%M:%S')" >> logs/summary.md
          echo "- **Total verificaciones:** 1" >> logs/summary.md
          echo "" >> logs/summary.md
          echo "---" >> logs/summary.md
          echo "" >> logs/summary.md
        done

    - name: üì¶ Upload reports as artifacts (v4)
      uses: actions/upload-artifact@v4
      with:
        name: urlwatch-reports-${{ github.run_number }}
        path: |
          logs/*.md
          logs/*.txt
          logs/*.json
        retention-days: 30

    - name: üíæ Backup cache for next run
      run: |
        # Copiar cache al repo para persistirlo
        if [ -f ".urlwatch/cache.db" ]; then
          cp .urlwatch/cache.db cache.db
          echo "‚úÖ Cache guardado para pr√≥xima ejecuci√≥n"
        fi

    - name: üóÇÔ∏è Organize log files
      run: |
        # Mantener solo los √∫ltimos 10 archivos de log
        cd logs
        ls -t urlwatch_*.txt | tail -n +11 | xargs -r rm --
        echo "üßπ Archivos antiguos limpiados"

    - name: üì§ Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add logs/ cache.db || true
        
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No hay cambios para commitear"
        else
          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
          
          if ls logs/urlwatch_*.txt | xargs grep -l "ERROR:" | tail -n1 > /dev/null 2>&1; then
            COMMIT_MSG="üîç URLWatch monitoring update ‚ö†Ô∏è  - ${TIMESTAMP}"
          else
            COMMIT_MSG="üîç URLWatch monitoring update ‚úÖ - ${TIMESTAMP}"
          fi
          
          git commit -m "$COMMIT_MSG" || true
          git push || true
          echo "‚úÖ Cambios enviados al repositorio"
        fi

    - name: üìä Display summary
      run: |
        echo "=================================="
        echo "üéØ RESUMEN DE EJECUCI√ìN"
        echo "=================================="
        echo "üìÖ Fecha: $(date '+%d/%m/%Y %H:%M:%S')"
        echo "üîó URLs monitoreadas: $(grep -c '^name:' .urlwatch/urls.yaml)"
        echo "üìÅ Archivos de log: $(ls logs/ | wc -l)"
        
        if [ -f "logs/sites_status.txt" ]; then
          echo ""
          echo "üìã Estado actual de sitios:"
          grep -E "^üìä|^‚úÖ" logs/sites_status.txt | head -12 || true
        fi
